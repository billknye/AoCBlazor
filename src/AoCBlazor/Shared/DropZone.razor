@using System.Text
@* file: DropZone.razor *@
@inject IJSRuntime JSRuntime
@inject ConsoleEx console
@implements IAsyncDisposable

<InputFile class="fileUpload" OnChange="@OnChange" @ref="inputFile" />

@code {
        InputFile inputFile;

        IJSObjectReference _module;
        IJSObjectReference _dropZoneInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the JS file
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");

            // Initialize the drop zone
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", inputFile.Element);
        }
    }

    // Called when a new file is uploaded
    async Task OnChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);

        // Detect and remove utf8 bom from beginning of stream
        var encoding = new UTF8Encoding(true);
        var preamble = encoding.GetPreamble();

        if (ms.Length > preamble.Length)
        {
            var tmp = new byte[preamble.Length];
            ms.Position = 0;
            ms.Read(tmp);

            if (tmp.SequenceEqual(preamble))
            { 
                console.PostReadLine(encoding.GetString(ms.ToArray().AsSpan(preamble.Length))); 
                return;
            }
        }

        console.PostReadLine(encoding.GetString(ms.ToArray()));
    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}